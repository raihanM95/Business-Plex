@model BusinessPlex.Models.PurchaseViewModel
@{
    ViewBag.Title = "Entry";
    Layout = "~/Views/Shared/_LogInLayout.cshtml";
}

@using (Html.BeginForm("Entry", "Purchase", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 class="h-position">Entry Purchase</h4>
        <hr class="hr-design">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="border border-primary">
            <div class="form-group">
                @Html.LabelFor(model => model.Date, new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @id = "date", @class = "form-control" }, @value = DateTime.Now })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.InvoiceNo, new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @id = "invoiceNo", @class = "form-control", @placeholder = "Enter invoice no" } })
                    @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SupplierId, new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.SupplierId, Model.SupplierSelectListItems, "---Select---", new { @id = "supplier", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">Purchase Details</div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.ProductId, Model.ProductSelectListItems, "---Select---", new { @id = "product", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductCode, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @id = "code", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ManufacturedDate, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ManufacturedDate, new { htmlAttributes = new { @id = "manufacturedDate", @class = "form-control" }, @value = DateTime.Now })
                                @Html.ValidationMessageFor(model => model.ManufacturedDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ExpireDate, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ExpireDate, new { htmlAttributes = new { @id = "expireDate", @class = "form-control" }, @value = DateTime.Now })
                                @Html.ValidationMessageFor(model => model.ExpireDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.TextAreaFor(model => model.Remarks, new { @id = "remarks", @class = "form-control", @placeholder = "" })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @id = "quantity", @class = "form-control", @placeholder = "Enter quantity" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitPrice, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @id = "unitPrice", @class = "form-control", @placeholder = "Enter unit price" } })
                                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TotalPrice, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.TotalPrice, new { htmlAttributes = new { @id = "totalPrice", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PreviousCostPrice, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PreviousCostPrice, new { htmlAttributes = new { @id = "previousCostPrice", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.PreviousCostPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PreviousMRP, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PreviousMRP, new { htmlAttributes = new { @id = "previousMRP", @class = "form-control", @placeholder = "<View>", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.PreviousMRP, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MRP, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.MRP, new { htmlAttributes = new { @id = "mrp", @class = "form-control", @placeholder = "Enter new MRP" } })
                                @Html.ValidationMessageFor(model => model.MRP, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-8 col-md-4">
                                <input type="button" id="addButton" value="Add" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div>
                <table class="table table-bordered table-striped table-hover table-responsive">
                    <thead>
                        <tr>
                            <th>SL</th>
                            <th>
                                @Html.DisplayNameFor(model => model.ProductCode)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.ManufacturedDate)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.ExpireDate)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Quantity)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.UnitPrice)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.TotalPrice)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.MRP)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Remarks)
                            </th>

                            <th>Action</th>
                        </tr>

                    </thead>
                    <tbody id="productTableBody">
                        
                    </tbody>
                </table>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 col-md-offset-11 col-md-1">
                <input type="submit" id="purchaseSubmitButton" value="Submit" class="btn btn-primary" />
            </div>

        </div>
    </div>
}

@section Scripts{
    <script>
        // Show Product Scripts
        $("#product").change(function () {
            debugger
            var productId = $("#product").val();

            $.ajax({
                url: "/purchase/getproducthistory",
                type: "POST",
                data: { productId: productId },
                success: function (model) {
                    $("#code").val(model.Code);
                    $("#previousCostPrice").val(model.PreviousCostPrice);
                    $("#previousMRP").val(model.PreviousMRP);
                }
            })
        })

        $("#unitPrice").keyup(function () {

            var quantity = $("#quantity").val();
            if (quantity !== undefined || quantity.length == 0) {
                var unitPrice = $("#unitPrice").val();
                var totalPrice = unitPrice * quantity;
                $("#totalPrice").val(totalPrice);
                
                var costingAmount = (unitPrice * 25) / 100;
                var newMRP = parseFloat(unitPrice) + parseFloat(costingAmount);
                $("#mrp").val(newMRP);
            }
        })

        $("#quantity").keyup(function () {
            var unitPrice = $("#unitPrice").val();
            if (unitPrice !== undefined || quantity.length == 0) {
                var quantity = $("#quantity").val();
                var totalPrice = unitPrice * quantity;
                $("#totalPrice").val(totalPrice);
            }
        })

        // Table Scripts
        $("#addButton").click(function () {
            addProductsInList();
        });

        function addProductsInList() {

            var getProducts = getProductsFromTextBox();

            var index = $("#productTableBody").children("tr").length;

            var sl = index;
            var indexCell = "<td style='display:none'><input type='hidden' id='index" + index + "' name='PurchaseDetails.index' value='" + index + "' /></td>";
            var slCell = "<td>" + (++sl) + "</td>";
            var productCell = "<td style='display:none'><input type='hidden' id='product" + index + "' name='PurchaseDetails[" + index + "].ProductId' value='" + getProducts.ProductId + "'/></td>";
            var productCodeCell = "<td>" + getProducts.ProductCode + "</td>";
            var manufactureDateCell = "<td><input type='hidden' id='manufactureDate" + index + "' name='PurchaseDetails[" + index + "].ManufacturedDate' value='" + getProducts.ManufacturedDate + "' />" + getProducts.ManufacturedDate + "</td>";
            var expireDateCell = "<td><input type='hidden' id='expireDate" + index + "' name='PurchaseDetails[" + index + "].ExpireDate' value='" + getProducts.ExpireDate + "' />" + getProducts.ExpireDate + "</td>";
            var quantityCell = "<td><input type='hidden' id='quantity" + index + "' name='PurchaseDetails[" + index + "].Quantity' value='" + getProducts.Quantity + "' />" + getProducts.Quantity + "</td>";
            var unitPriceCell = "<td><input type='hidden' id='unitPrice" + index + "' name='PurchaseDetails[" + index + "].UnitPrice' value='" + getProducts.UnitPrice + "' />" + getProducts.UnitPrice + "</td>";
            var totalPriceCell = "<td><input type='hidden' id='totalPrice" + index + "' name='PurchaseDetails[" + index + "].TotalPrice' value='" + getProducts.TotalPrice + "' />" + getProducts.TotalPrice + "</td>";
            var mrpCell = "<td><input type='hidden' id='newMRP" + index + "' name='PurchaseDetails[" + index + "].MRP' value='" + getProducts.MRP + "' />" + getProducts.MRP + "</td>";
            var remarksCell = "<td><input type='hidden' id='remark" + index + "' name='PurchaseDetails[" + index + "].Remarks' value='" + getProducts.Remarks + "' />" + getProducts.Remarks + "</td>";
            
            var deleteCell = "<td><a id='deleteCell' class='btn btn-danger'><i class='glyphicon glyphicon-trash'></i></a></td>";

            var createRow = "<tr>" + indexCell + slCell + productCell + productCodeCell + manufactureDateCell + expireDateCell + quantityCell + unitPriceCell + totalPriceCell + mrpCell + remarksCell + deleteCell + "</tr>";
            $("#productTableBody").append(createRow);
            $("#purchaseSubmitButton").prop('disabled', false);
        }

        function getProductsFromTextBox() {

            var productId = $("#product").val();
            var productCode = $("#code").val();
            var manufactureDate = $("#manufacturedDate").val();
            var expireDate = $("#expireDate").val();
            var quantity = $("#quantity").val();
            var unitPrice = $("#unitPrice").val();
            var totalPrice = $("#totalPrice").val();
            var MRP = $("#mrp").val();
            var remarks = $("#remarks").val();

            if (productId === undefined || productId.length == 0) {
                alert('Please select your product!');
                return;
            }
            if (quantity === undefined || quantity.length == 0) {
                alert('Please enter product quantity!');
                return;
            }
            if (unitPrice === undefined || unitPrice.length == 0) {
                alert('Please enter product unit price!');
                return;
            }
            //if (manufactureDate === undefined || manufactureDate.length == 0) {
            //    manufactureDate = "--";
            //}
            //if (expireDate === undefined || expireDate.length == 0) {
            //    expireDate = "--";
            //}

            var product = {

                "ProductId": productId,
                "ProductCode": productCode,
                "ManufacturedDate": manufactureDate,
                "ExpireDate": expireDate,
                "Quantity": quantity,
                "UnitPrice": unitPrice,
                "TotalPrice": totalPrice,
                "MRP": MRP,
                "Remarks": remarks,
            }
            return product;
        }
        
        // Table Action Scripts
        $(".table tbody").on('click', '#deleteCell', function () {
            $(this).closest('tr').remove();
            // Check Exist Table Row
            var row = $("#productTableBody").children('tr').length;
            if (row > 0) {
                $("#purchaseSubmitButton").prop('disabled', false);
            }
            else {
                $("#purchaseSubmitButton").prop('disabled', true);
            }
        })
    </script>
}
